type (for Piece objects)
     = {
		1: King
		2: Queen
		3: Bishop
		4: Knight
		5: Rook
		6: Pawn
		7: En Passant
       }

moveType = {
		0: locomotion
		1: killing piece
		2: spawning new piece
           }

messageType = {
		// Chess -> Printer
		0: normal message, NMessage
			[int[][] board, int newTurn, boolean check]
			(rewrite updated board and prompt for new move)
			(prompt includes whether the new player is in check)
		1: invalid move shape message, IMSMessage
			[]
		2: Game over message
			[int[][] board, int winner]
			(board still needs to be printed);
		3: moved into check message, MICMessage
			[]
		// Reader -> Chess
		16: syntactially valid input move, VIMessage
			[String input]
		17: syntactially invalid input move, IIMessage
			[]
		18: reprint board
			[]
		// Other
		99: Internal error
	      }

board ints (for NMessage int[][] board)
	   = {
	   	0: Empty

		WHITE
		1: King
		2: Queen
		3: Bishop
		4: Knight
		5: Rook
		6: Pawn
		7: En Passant

		BLACK 
		8: King
		9: Queen
		10: Bishop
		11: Knight
		12: Rook
		13: Pawn
		14: En Passant
	     }

// TODO: Add turn value to every move obj
